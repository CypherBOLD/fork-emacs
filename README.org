#+TITLE: My Emacs settings
#+AUTHOR: Blau araujo

* Emacs settings

This file is named =~/.emacs.d/emacs.org= and loaded by [[emacs.d/init.el][~/.emacs.d/init.el]].

** General settings

*** Fix 'obsolete cl' warning

#+begin_src emacs-lisp
(setq byte-compile-warnings '(cl-functions))
#+end_src

*** General variables

#+begin_src emacs-lisp
  (setq inhibit-startup-message t                    ; no welcome buffer
        visible-bell t                               ; blinks at cursor limits
        history-length 20                            ; max history saves
        use-dialog-box nil                           ; no ugly dialogs
        global-auto-revert-non-file-buffers t        ; update buffers thar are non-files too
        tab-always-indent 'complete                  ; use TAB to complete symbols
        mouse-wheel-scroll-amount '(2 ((shift) . 1)) ; scroll 2 lines
        mouse-wheel-progressive-speed nil            ; don't accelerate
        mouse-wheel-follow-mouse 't                  ; scroll window under mouse cursor
        scroll-step 1)                               ; scroll 1 line with keyboard
#+end_src

*** Disable clipboard saving to X clipboard manager on exit

#+begin_src emacs-lisp
  (setq x-select-enable-clipboard-manager nil)
#+end_src

*** General default modes

#+begin_src emacs-lisp
  (menu-bar-mode -1)                      ; no menu bar
  (tool-bar-mode -1)                      ; no tools bar
  (scroll-bar-mode -1)                    ; no scroll bars
  (set-fringe-mode 10)                    ; frame edges set to 10px
  (column-number-mode 1)                  ; absolute numbering
  (recentf-mode 1)                        ; remember recent files
  (save-place-mode 1)                     ; remember cursor position
  (savehist-mode 1)                       ; enable history saving
  (delete-selection-mode t)               ; overwrite selected text when typing
  (global-hl-line-mode 1)                 ; enable current line highlight
  (global-visual-line-mode t)             ; visual line breaking
  (global-auto-revert-mode 1)             ; update externaly edited files
  (global-display-line-numbers-mode 1)    ; always show line numbers
#+end_src

** Some tweaks

*** Use spaces instead of tabs

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil)
#+end_src

*** Hook for flyspell on text mode

#+begin_src emacs-lisp
  (dolist (hook '(text-mode-hook))
    (add-hook hook (lambda () (flyspell-mode 1))))
#+end_src

*** Disable C-z

#+begin_src emacs-lisp
  (global-unset-key (kbd "C-z"))
#+end_src

*** Make new windows active

#+begin_src emacs-lisp
  (global-set-key "\C-x2" (lambda ()
                (interactive)
                (split-window-vertically) (other-window 1)))

  (global-set-key "\C-x3" (lambda ()
                (interactive)
                (split-window-horizontally) (other-window 1)))
#+end_src

*** Enable case changes keys (C-x C-u and C-x C-l)

#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
#+end_src

*** Send custom settings to another file

#+begin_src emacs-lisp
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file 'noerror 'nomessage)
#+end_src

*** Backups dir

#+begin_src emacs-lisp
  (setq backup-directory-alist `(("." . ,(expand-file-name "saves/" user-emacs-directory))))
#+end_src

*** Load my functions

#+begin_src emacs-lisp
  (load "~/.emacs.d/debmx/debmx-faces.el")
  (load "~/.emacs.d/debmx/debmx.el")
  (load "~/.emacs.d/debmx/debmx-map.el")
#+end_src

*** Force fonts loading in daemon mode

#+begin_src emacs-lisp
  (if (daemonp)
    (add-hook 'after-make-frame-functions
              (lambda (frame)
                (with-selected-frame frame
                  (debmx/set-font-faces))))
    (debmx/set-font-faces))
#+end_src

*** Append auto-modes

#+begin_src emacs-lisp
  (setq auto-mode-alist
        (append '(("\\.bash_aliases\\'" . sh-mode)
                  ("\\.cl\\'" . common-lisp-mode)) auto-mode-alist))
#+end_src

** Package management

*** Package system initialization

#+begin_src emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
               ("org"   . "https://orgmode.org/elpa/")
               ("elpa"  . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

*** Install package manager 'use-package'

#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

** Theme and appearance

*** Install Modus Themes

#+begin_src emacs-lisp
  (use-package modus-themes)
  (setq modus-themes-mode-line '(accented borderless)
        modus-themes-region '(bg-only)
        modus-themes-paren-match '(bold intense underline)
        modus-themes-headings '((t . (rainbow bold)))
        modus-themes-org-blocks 'gray-background)

#+end_src

*** Install Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config (setq doom-themes-enable-bold t
                  doom-themes-enable-italic t)
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))
#+end_src

*** Load theme

#+begin_src emacs-lisp
  ;; Load Modus Theme
  ;; (load-theme 'modus-vivendi t)
  
  ;; Load doom-palenight theme 
  (load-theme 'doom-palenight t)
#+end_src

*** Doom modeline

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook
  (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-height 30)
  :config
  (setq doom-modeline-enable-word-count t))
#+end_src

*** Force fonts settings for modeline

#+begin_src emacs-lisp
  ;; Força a minha definição de fontes na mode line
  (set-face-attribute 'mode-line nil :font "Roboto Mono" :height 90)
  (set-face-attribute 'mode-line-inactive nil :font "Roboto Mono" :height 90)

#+end_src

*** Enable matching parenthesis highlight

#+begin_src emacs-lisp
  (setq show-paren-style 'mixed)
  (show-paren-mode 1)
#+end_src

*** Rainbow delimiters

Must be another way to do this...

#+begin_src emacs-lisp
  (use-package rainbow-delimiters)
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
  (add-hook 'text-mode-hook 'rainbow-delimiters-mode)
#+end_src

*** Smartparens

#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    :init
    (require 'smartparens-config)
    (smartparens-global-mode t)
    :diminish smartparens-mode
    :config
    (show-smartparens-mode t))
#+end_src

*** Diminish

How and what minor modes will be shown on modeline

#+begin_src emacs-lisp
  (use-package diminish)
  (diminish 'visual-line-mode "")
  (diminish 'eldoc-mode "")
  (diminish 'flyspell-mode "Spell")
#+end_src

*** Beacon

Highlights cursor position

#+begin_src emacs-lisp
  (use-package beacon
    :diminish beacon-mode
    :config (beacon-mode 1))
#+end_src

** Auto-completions and key info

*** Which Key

#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.3)
    (setq which-key-show-early-on-C-h t))
#+end_src

*** Company

#+begin_src emacs-lisp
  (use-package company
    :diminish company-mode
    :hook (after-init . global-company-mode))
#+end_src

*** Vertico

#+begin_src emacs-lisp
  (use-package vertico
    :init (vertico-mode)
    :config (setq vertico-cycle t))
#+end_src

*** Marginalia

#+begin_src emacs-lisp
  (use-package marginalia
    :init (marginalia-mode))
#+end_src

** Development tools

*** Magit

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

*** Flycheck

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :hook (prog-mode-hook . flycheck-mode))
#+end_src

*** Projectile

#+begin_src emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :bind-keymap ("C-z p" . projectile-command-map)
    :config
    (projectile-mode))
#+end_src

*** Treemacs

#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :bind
    (:map global-map
          ("M-\\" . treemacs))
    :config
    (setq treemacs-no-png-images t
          treemacs-is-never-other-window nil))
#+end_src

*** Rainbow mode

#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

*** SLY

#+begin_src emacs-lisp
  (use-package sly
    :config (setq inferior-lisp-program "/usr/bin/sbcl"))
#+end_src

** Languages

*** PHP mode

#+begin_src emacs-lisp
  (use-package php-mode
    :mode ("\\.php\\'" . php-mode))
#+end_src

*** Web mode

#+begin_src emacs-lisp
  (use-package web-mode
    :mode ("\\.phtml\\.tpl\\.html\\.twig\\.html?\\'" . web-mode))
#+end_src

** Edit and publishing

*** Markdown mode

#+begin_src emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . gfm-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "pandoc"))
#+end_src

*** Org mode

#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :hook (org-mode . debmx/defaults-org)
    :config
    (setq org-support-shift-select t
          org-hide-emphasis-markers t
          org-ellipsis " ▾"
          org-babel-default-header-args '((:results . "output"))
          org-confirm-babel-evaluate nil)
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((awk . t)
       (css . t)
       (emacs-lisp . t)
       (lisp . t)
       (lua . t)
       (shell . t)
       (php . t)
       (C . t))))
  
  (require 'org-indent)
#+end_src

*** Visual fill column

#+begin_src emacs-lisp
  (use-package visual-fill-column
    :ensure t
    :hook ('org-mode . 'debmx/visual-fill-column-defaults))
#+end_src

*** Org bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "●" "○" "○" "○" "○" "○")))
#+end_src

*** Replace list hyphen with dots

#+begin_src emacs-lisp
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                             (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+end_src

*** Org tempo

#+begin_src emacs-lisp
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("awk" . "src awk"))
  (add-to-list 'org-structure-template-alist '("css" . "src css"))
  (add-to-list 'org-structure-template-alist '("lua" . "src lua"))
  (add-to-list 'org-structure-template-alist '("php" . "src php"))
  (add-to-list 'org-structure-template-alist '("sh"  . "src shell"))
  (add-to-list 'org-structure-template-alist '("cfg" . "src unix-config"))
  (add-to-list 'org-structure-template-alist '("lisp" . "src lisp"))
#+end_src



